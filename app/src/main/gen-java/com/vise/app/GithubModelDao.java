package com.vise.app;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GITHUB_MODEL".
*/
public class GithubModelDao extends AbstractDao<GithubModel, Long> {

    public static final String TABLENAME = "GITHUB_MODEL";

    /**
     * Properties of entity GithubModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Current_user_url = new Property(1, String.class, "current_user_url", false, "CURRENT_USER_URL");
        public final static Property Current_user_authorizations_html_url = new Property(2, String.class, "current_user_authorizations_html_url", false, "CURRENT_USER_AUTHORIZATIONS_HTML_URL");
        public final static Property Authorizations_url = new Property(3, String.class, "authorizations_url", false, "AUTHORIZATIONS_URL");
        public final static Property Code_search_url = new Property(4, String.class, "code_search_url", false, "CODE_SEARCH_URL");
        public final static Property Commit_search_url = new Property(5, String.class, "commit_search_url", false, "COMMIT_SEARCH_URL");
        public final static Property Emails_url = new Property(6, String.class, "emails_url", false, "EMAILS_URL");
        public final static Property Emojis_url = new Property(7, String.class, "emojis_url", false, "EMOJIS_URL");
        public final static Property Events_url = new Property(8, String.class, "events_url", false, "EVENTS_URL");
        public final static Property Feeds_url = new Property(9, String.class, "feeds_url", false, "FEEDS_URL");
        public final static Property Followers_url = new Property(10, String.class, "followers_url", false, "FOLLOWERS_URL");
        public final static Property Following_url = new Property(11, String.class, "following_url", false, "FOLLOWING_URL");
        public final static Property Gists_url = new Property(12, String.class, "gists_url", false, "GISTS_URL");
        public final static Property Hub_url = new Property(13, String.class, "hub_url", false, "HUB_URL");
        public final static Property Issue_search_url = new Property(14, String.class, "issue_search_url", false, "ISSUE_SEARCH_URL");
        public final static Property Issues_url = new Property(15, String.class, "issues_url", false, "ISSUES_URL");
        public final static Property Keys_url = new Property(16, String.class, "keys_url", false, "KEYS_URL");
        public final static Property Notifications_url = new Property(17, String.class, "notifications_url", false, "NOTIFICATIONS_URL");
        public final static Property Organization_repositories_url = new Property(18, String.class, "organization_repositories_url", false, "ORGANIZATION_REPOSITORIES_URL");
        public final static Property Organization_url = new Property(19, String.class, "organization_url", false, "ORGANIZATION_URL");
        public final static Property Public_gists_url = new Property(20, String.class, "public_gists_url", false, "PUBLIC_GISTS_URL");
        public final static Property Rate_limit_url = new Property(21, String.class, "rate_limit_url", false, "RATE_LIMIT_URL");
        public final static Property Repository_url = new Property(22, String.class, "repository_url", false, "REPOSITORY_URL");
        public final static Property Repository_search_url = new Property(23, String.class, "repository_search_url", false, "REPOSITORY_SEARCH_URL");
        public final static Property Current_user_repositories_url = new Property(24, String.class, "current_user_repositories_url", false, "CURRENT_USER_REPOSITORIES_URL");
        public final static Property Starred_url = new Property(25, String.class, "starred_url", false, "STARRED_URL");
        public final static Property Starred_gists_url = new Property(26, String.class, "starred_gists_url", false, "STARRED_GISTS_URL");
        public final static Property Team_url = new Property(27, String.class, "team_url", false, "TEAM_URL");
        public final static Property User_url = new Property(28, String.class, "user_url", false, "USER_URL");
        public final static Property User_organizations_url = new Property(29, String.class, "user_organizations_url", false, "USER_ORGANIZATIONS_URL");
        public final static Property User_repositories_url = new Property(30, String.class, "user_repositories_url", false, "USER_REPOSITORIES_URL");
        public final static Property User_search_url = new Property(31, String.class, "user_search_url", false, "USER_SEARCH_URL");
    }


    public GithubModelDao(DaoConfig config) {
        super(config);
    }
    
    public GithubModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GITHUB_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CURRENT_USER_URL\" TEXT," + // 1: current_user_url
                "\"CURRENT_USER_AUTHORIZATIONS_HTML_URL\" TEXT," + // 2: current_user_authorizations_html_url
                "\"AUTHORIZATIONS_URL\" TEXT," + // 3: authorizations_url
                "\"CODE_SEARCH_URL\" TEXT," + // 4: code_search_url
                "\"COMMIT_SEARCH_URL\" TEXT," + // 5: commit_search_url
                "\"EMAILS_URL\" TEXT," + // 6: emails_url
                "\"EMOJIS_URL\" TEXT," + // 7: emojis_url
                "\"EVENTS_URL\" TEXT," + // 8: events_url
                "\"FEEDS_URL\" TEXT," + // 9: feeds_url
                "\"FOLLOWERS_URL\" TEXT," + // 10: followers_url
                "\"FOLLOWING_URL\" TEXT," + // 11: following_url
                "\"GISTS_URL\" TEXT," + // 12: gists_url
                "\"HUB_URL\" TEXT," + // 13: hub_url
                "\"ISSUE_SEARCH_URL\" TEXT," + // 14: issue_search_url
                "\"ISSUES_URL\" TEXT," + // 15: issues_url
                "\"KEYS_URL\" TEXT," + // 16: keys_url
                "\"NOTIFICATIONS_URL\" TEXT," + // 17: notifications_url
                "\"ORGANIZATION_REPOSITORIES_URL\" TEXT," + // 18: organization_repositories_url
                "\"ORGANIZATION_URL\" TEXT," + // 19: organization_url
                "\"PUBLIC_GISTS_URL\" TEXT," + // 20: public_gists_url
                "\"RATE_LIMIT_URL\" TEXT," + // 21: rate_limit_url
                "\"REPOSITORY_URL\" TEXT," + // 22: repository_url
                "\"REPOSITORY_SEARCH_URL\" TEXT," + // 23: repository_search_url
                "\"CURRENT_USER_REPOSITORIES_URL\" TEXT," + // 24: current_user_repositories_url
                "\"STARRED_URL\" TEXT," + // 25: starred_url
                "\"STARRED_GISTS_URL\" TEXT," + // 26: starred_gists_url
                "\"TEAM_URL\" TEXT," + // 27: team_url
                "\"USER_URL\" TEXT," + // 28: user_url
                "\"USER_ORGANIZATIONS_URL\" TEXT," + // 29: user_organizations_url
                "\"USER_REPOSITORIES_URL\" TEXT," + // 30: user_repositories_url
                "\"USER_SEARCH_URL\" TEXT);"); // 31: user_search_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GITHUB_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GithubModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String current_user_url = entity.getCurrent_user_url();
        if (current_user_url != null) {
            stmt.bindString(2, current_user_url);
        }
 
        String current_user_authorizations_html_url = entity.getCurrent_user_authorizations_html_url();
        if (current_user_authorizations_html_url != null) {
            stmt.bindString(3, current_user_authorizations_html_url);
        }
 
        String authorizations_url = entity.getAuthorizations_url();
        if (authorizations_url != null) {
            stmt.bindString(4, authorizations_url);
        }
 
        String code_search_url = entity.getCode_search_url();
        if (code_search_url != null) {
            stmt.bindString(5, code_search_url);
        }
 
        String commit_search_url = entity.getCommit_search_url();
        if (commit_search_url != null) {
            stmt.bindString(6, commit_search_url);
        }
 
        String emails_url = entity.getEmails_url();
        if (emails_url != null) {
            stmt.bindString(7, emails_url);
        }
 
        String emojis_url = entity.getEmojis_url();
        if (emojis_url != null) {
            stmt.bindString(8, emojis_url);
        }
 
        String events_url = entity.getEvents_url();
        if (events_url != null) {
            stmt.bindString(9, events_url);
        }
 
        String feeds_url = entity.getFeeds_url();
        if (feeds_url != null) {
            stmt.bindString(10, feeds_url);
        }
 
        String followers_url = entity.getFollowers_url();
        if (followers_url != null) {
            stmt.bindString(11, followers_url);
        }
 
        String following_url = entity.getFollowing_url();
        if (following_url != null) {
            stmt.bindString(12, following_url);
        }
 
        String gists_url = entity.getGists_url();
        if (gists_url != null) {
            stmt.bindString(13, gists_url);
        }
 
        String hub_url = entity.getHub_url();
        if (hub_url != null) {
            stmt.bindString(14, hub_url);
        }
 
        String issue_search_url = entity.getIssue_search_url();
        if (issue_search_url != null) {
            stmt.bindString(15, issue_search_url);
        }
 
        String issues_url = entity.getIssues_url();
        if (issues_url != null) {
            stmt.bindString(16, issues_url);
        }
 
        String keys_url = entity.getKeys_url();
        if (keys_url != null) {
            stmt.bindString(17, keys_url);
        }
 
        String notifications_url = entity.getNotifications_url();
        if (notifications_url != null) {
            stmt.bindString(18, notifications_url);
        }
 
        String organization_repositories_url = entity.getOrganization_repositories_url();
        if (organization_repositories_url != null) {
            stmt.bindString(19, organization_repositories_url);
        }
 
        String organization_url = entity.getOrganization_url();
        if (organization_url != null) {
            stmt.bindString(20, organization_url);
        }
 
        String public_gists_url = entity.getPublic_gists_url();
        if (public_gists_url != null) {
            stmt.bindString(21, public_gists_url);
        }
 
        String rate_limit_url = entity.getRate_limit_url();
        if (rate_limit_url != null) {
            stmt.bindString(22, rate_limit_url);
        }
 
        String repository_url = entity.getRepository_url();
        if (repository_url != null) {
            stmt.bindString(23, repository_url);
        }
 
        String repository_search_url = entity.getRepository_search_url();
        if (repository_search_url != null) {
            stmt.bindString(24, repository_search_url);
        }
 
        String current_user_repositories_url = entity.getCurrent_user_repositories_url();
        if (current_user_repositories_url != null) {
            stmt.bindString(25, current_user_repositories_url);
        }
 
        String starred_url = entity.getStarred_url();
        if (starred_url != null) {
            stmt.bindString(26, starred_url);
        }
 
        String starred_gists_url = entity.getStarred_gists_url();
        if (starred_gists_url != null) {
            stmt.bindString(27, starred_gists_url);
        }
 
        String team_url = entity.getTeam_url();
        if (team_url != null) {
            stmt.bindString(28, team_url);
        }
 
        String user_url = entity.getUser_url();
        if (user_url != null) {
            stmt.bindString(29, user_url);
        }
 
        String user_organizations_url = entity.getUser_organizations_url();
        if (user_organizations_url != null) {
            stmt.bindString(30, user_organizations_url);
        }
 
        String user_repositories_url = entity.getUser_repositories_url();
        if (user_repositories_url != null) {
            stmt.bindString(31, user_repositories_url);
        }
 
        String user_search_url = entity.getUser_search_url();
        if (user_search_url != null) {
            stmt.bindString(32, user_search_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GithubModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String current_user_url = entity.getCurrent_user_url();
        if (current_user_url != null) {
            stmt.bindString(2, current_user_url);
        }
 
        String current_user_authorizations_html_url = entity.getCurrent_user_authorizations_html_url();
        if (current_user_authorizations_html_url != null) {
            stmt.bindString(3, current_user_authorizations_html_url);
        }
 
        String authorizations_url = entity.getAuthorizations_url();
        if (authorizations_url != null) {
            stmt.bindString(4, authorizations_url);
        }
 
        String code_search_url = entity.getCode_search_url();
        if (code_search_url != null) {
            stmt.bindString(5, code_search_url);
        }
 
        String commit_search_url = entity.getCommit_search_url();
        if (commit_search_url != null) {
            stmt.bindString(6, commit_search_url);
        }
 
        String emails_url = entity.getEmails_url();
        if (emails_url != null) {
            stmt.bindString(7, emails_url);
        }
 
        String emojis_url = entity.getEmojis_url();
        if (emojis_url != null) {
            stmt.bindString(8, emojis_url);
        }
 
        String events_url = entity.getEvents_url();
        if (events_url != null) {
            stmt.bindString(9, events_url);
        }
 
        String feeds_url = entity.getFeeds_url();
        if (feeds_url != null) {
            stmt.bindString(10, feeds_url);
        }
 
        String followers_url = entity.getFollowers_url();
        if (followers_url != null) {
            stmt.bindString(11, followers_url);
        }
 
        String following_url = entity.getFollowing_url();
        if (following_url != null) {
            stmt.bindString(12, following_url);
        }
 
        String gists_url = entity.getGists_url();
        if (gists_url != null) {
            stmt.bindString(13, gists_url);
        }
 
        String hub_url = entity.getHub_url();
        if (hub_url != null) {
            stmt.bindString(14, hub_url);
        }
 
        String issue_search_url = entity.getIssue_search_url();
        if (issue_search_url != null) {
            stmt.bindString(15, issue_search_url);
        }
 
        String issues_url = entity.getIssues_url();
        if (issues_url != null) {
            stmt.bindString(16, issues_url);
        }
 
        String keys_url = entity.getKeys_url();
        if (keys_url != null) {
            stmt.bindString(17, keys_url);
        }
 
        String notifications_url = entity.getNotifications_url();
        if (notifications_url != null) {
            stmt.bindString(18, notifications_url);
        }
 
        String organization_repositories_url = entity.getOrganization_repositories_url();
        if (organization_repositories_url != null) {
            stmt.bindString(19, organization_repositories_url);
        }
 
        String organization_url = entity.getOrganization_url();
        if (organization_url != null) {
            stmt.bindString(20, organization_url);
        }
 
        String public_gists_url = entity.getPublic_gists_url();
        if (public_gists_url != null) {
            stmt.bindString(21, public_gists_url);
        }
 
        String rate_limit_url = entity.getRate_limit_url();
        if (rate_limit_url != null) {
            stmt.bindString(22, rate_limit_url);
        }
 
        String repository_url = entity.getRepository_url();
        if (repository_url != null) {
            stmt.bindString(23, repository_url);
        }
 
        String repository_search_url = entity.getRepository_search_url();
        if (repository_search_url != null) {
            stmt.bindString(24, repository_search_url);
        }
 
        String current_user_repositories_url = entity.getCurrent_user_repositories_url();
        if (current_user_repositories_url != null) {
            stmt.bindString(25, current_user_repositories_url);
        }
 
        String starred_url = entity.getStarred_url();
        if (starred_url != null) {
            stmt.bindString(26, starred_url);
        }
 
        String starred_gists_url = entity.getStarred_gists_url();
        if (starred_gists_url != null) {
            stmt.bindString(27, starred_gists_url);
        }
 
        String team_url = entity.getTeam_url();
        if (team_url != null) {
            stmt.bindString(28, team_url);
        }
 
        String user_url = entity.getUser_url();
        if (user_url != null) {
            stmt.bindString(29, user_url);
        }
 
        String user_organizations_url = entity.getUser_organizations_url();
        if (user_organizations_url != null) {
            stmt.bindString(30, user_organizations_url);
        }
 
        String user_repositories_url = entity.getUser_repositories_url();
        if (user_repositories_url != null) {
            stmt.bindString(31, user_repositories_url);
        }
 
        String user_search_url = entity.getUser_search_url();
        if (user_search_url != null) {
            stmt.bindString(32, user_search_url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GithubModel readEntity(Cursor cursor, int offset) {
        GithubModel entity = new GithubModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // current_user_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // current_user_authorizations_html_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // authorizations_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // code_search_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // commit_search_url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // emails_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // emojis_url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // events_url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // feeds_url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // followers_url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // following_url
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // gists_url
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // hub_url
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // issue_search_url
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // issues_url
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // keys_url
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // notifications_url
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // organization_repositories_url
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // organization_url
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // public_gists_url
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // rate_limit_url
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // repository_url
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // repository_search_url
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // current_user_repositories_url
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // starred_url
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // starred_gists_url
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // team_url
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // user_url
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // user_organizations_url
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // user_repositories_url
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31) // user_search_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GithubModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrent_user_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCurrent_user_authorizations_html_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthorizations_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCode_search_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommit_search_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmails_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmojis_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEvents_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFeeds_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFollowers_url(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFollowing_url(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGists_url(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHub_url(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIssue_search_url(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIssues_url(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setKeys_url(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNotifications_url(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOrganization_repositories_url(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOrganization_url(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPublic_gists_url(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRate_limit_url(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRepository_url(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRepository_search_url(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCurrent_user_repositories_url(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setStarred_url(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setStarred_gists_url(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setTeam_url(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setUser_url(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setUser_organizations_url(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setUser_repositories_url(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setUser_search_url(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GithubModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GithubModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GithubModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
